import pandas as pd
import os
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from pandas.tseries.holiday import AbstractHolidayCalendar, Holiday
from pandas_market_calendars import get_calendar
import matplotlib.pyplot as plt



# Ruta de la carpeta
carpeta = "D:\\Backup Disco C Marco\\Oportunidades demandas\\Suministros\\"

# Obtener la lista de archivos en la carpeta
archivos = os.listdir(carpeta)

for archivo in archivos:

    ruta_archivo = os.path.join(carpeta, archivo)

    df = pd.read_excel(ruta_archivo) # cargo los datos del SIGEC en un data frame

    name=df.loc[0]["Nombre entidad"]

    act=df.loc[0]["Actividad desarrollada"]

    sum=int(df.loc[0]["Suministro"])

    flec=int(df.loc[0]["Factor de lectura"])

    dcp=int(df.loc[0]["DCP"])

    dcfp=int(df.loc[0]["DCFP"])

    #Agrego DCP y DCFP con coeficiente de seguridad de 15%
    dcpseguro=round(dcp*0.85)
    dcfpseguro=round(dcfp*0.85)

    df1=df[["Reloj Perfil 1","Energía Activa Importada [Wh]"]]

    df1["Demanda"]=(df1["Energía Activa Importada [Wh]"]*4*flec)/1000

    # Agregar la columna "Dia laboral"
    df1['Dia laboral'] = df1['Reloj Perfil 1'].dt.dayofweek  # 0: Lunes, 1: Martes, ..., 6: Domingo

    # Mapear los valores de 'Dia laboral' a True si es un día laboral (lunes a viernes), False si es fin de semana
    df1['Dia laboral'] = df1['Dia laboral'].isin([0, 1, 2, 3, 4])

    # Crear una lista de feriados en Argentina (puedes agregar más según sea necesario)
    feriados_ar = pd.to_datetime(['2023-02-20','2023-02-20', '2023-03-24','2023-04-02','2023-04-07','2023-05-01','2023-05-25','2023-06-17','2023-06-20','2023-07-09','2023-11-20','2023-12-08','2023-12-25'])

    # Marcar los feriados como no laborales
    df1['Dia laboral'] = ~df1['Reloj Perfil 1'].dt.date.isin(feriados_ar) & df1['Dia laboral']

    # Separar en dos DataFrames (días laborales y no laborales)
    df_dias_laborales = df1[df1['Dia laboral']]
    df_dias_no_laborales = df1[~df1['Dia laboral']]


    # Crear la columna 'Hora' como string para asegurar la agrupación adecuada
    df_dias_laborales['Hora'] = df_dias_laborales['Reloj Perfil 1'].dt.strftime('%H:%M:%S')

    # Agrupar por la columna 'Hora' y realizar el conteo y la sumatoria
    resumen = df_dias_laborales.groupby('Hora').agg({'Demanda': ['count', 'sum']}).reset_index()

    # Renombrar las columnas para mayor claridad
    resumen.columns = ['Hora', 'Conteo', 'Suma_Demanda']

    df_dias_laborales = pd.merge(df_dias_laborales, resumen, on='Hora', how='left')
    df_dias_laborales["Promedio"] = df_dias_laborales["Suma_Demanda"] / df_dias_laborales["Conteo"]

    # Obtener el valor máximo de la demanda por cada periodo de 15 minutos
    maximos_demandas = df_dias_laborales.groupby('Hora')['Demanda'].max().reset_index()

    # Renombrar la columna para mayor claridad
    maximos_demandas.columns = ['Hora', 'Maxima_Demanda']

    df_dias_laborales = pd.merge(df_dias_laborales, maximos_demandas, on='Hora', how='left')

    df_dias_laborales["Maxima"]=df_dias_laborales["Maxima_Demanda"]

    df_dias_laborales=df_dias_laborales[["Reloj Perfil 1","Energía Activa Importada [Wh]","Demanda","Dia laboral","Hora","Promedio","Maxima"]]

    # Convertir la columna 'Hora' a tipo datetime
    df_dias_laborales['Hora'] = pd.to_datetime(df_dias_laborales['Hora'])

    # Definir la función para determinar el horario
    def determinar_horario(hora):
        if hora.hour in [18, 19, 20, 21, 22, 23]:
            return 'PICO'
        else:
            return 'NO PICO'

    # Aplicar la función y crear la columna 'Horario'
    df_dias_laborales['Horario'] = df_dias_laborales['Reloj Perfil 1'].apply(determinar_horario)

    # Especificacion pico
    condicionpico = (df_dias_laborales['Horario'] == 'PICO') & (df_dias_laborales['Demanda'] > dcp)

    # Filtrar el DataFrame original
    df_resultado1 = df_dias_laborales.loc[condicionpico]

    eventospico=(df_resultado1.shape[0])

    demandaexpico= round((df_resultado1["Demanda"]-dcp).sum(),2)


    # Especificacion fpico
    condicionfpico = (df_dias_laborales['Horario'] == 'NO PICO') & (df_dias_laborales['Demanda'] > dcfp)

    # Filtrar el DataFrame original
    df_resultado2 = df_dias_laborales.loc[condicionfpico]

    eventosfpico=(df_resultado2.shape[0])

    demandaexfpico= round((df_resultado2["Demanda"]-dcfp).sum(),2)


    # Agrupar por hora y calcular el promedio y máximo
    df_agrupado = df_dias_laborales.groupby(df_dias_laborales['Hora'].dt.hour).agg({'Promedio': 'mean', 'Maxima': 'max'}).reset_index()

    # Agregar la columna "Horario"
    df_agrupado['Horario'] = df_agrupado['Hora'].apply(lambda x: 'PICO' if 18 <= x <= 23 else 'NO PICO')

    # Cambio nombre al dataframe, en esta agrupacion tengo la información necesaria para analizar
    week=df_agrupado[["Hora","Horario","Promedio","Maxima"]]

    week["DC SEGURA"]=week.apply(lambda row: dcpseguro  if row['Horario'] == 'PICO' else dcfpseguro,axis=1)

    #Agrego columna de oportunidad
    # Crear la columna "Oportunidad"
    week['Oportunidad'] = week.apply(lambda row: dcpseguro - row['Promedio'] if row['Horario'] == 'PICO' else dcfpseguro - row['Promedio'], axis=1)


    # Crear la gráfica
    plt.figure(figsize=(10, 6))

    # Graficar Promedio
    plt.plot(week['Hora'], week['Promedio'], label='Promedio', marker='o')

    # Graficar Máxima
    plt.plot(week['Hora'], week['Maxima'], label='Máxima', marker='o')

    # Graficar Demanda contratada segura
    plt.plot(week['Hora'], week['DC SEGURA'], label='DC SEGURA', marker='o')

    # Rellenar el área entre las líneas de DC segura y Promedio
    plt.fill_between(week['Hora'], week['DC SEGURA'], week['Promedio'], color='lightblue', alpha=0.95)

    # Agregar líneas constantes
    plt.axhline(y=dcp, color='r', linestyle='--', label='DCP')  # Línea constante DCP
    plt.axhline(y=dcfp, color='g', linestyle='--', label='DCFP')  # Línea constante DCFP

    # Configurar la gráfica
    plt.title('Week days '+str(name))
    plt.xlabel('Hora')
    plt.ylabel('Demanda')
    plt.legend()
    plt.grid(True)

       # Mostrar la gráfica
    plt.show()

    print(f"Se supera el valor contratado de demanda durante weekdays en horario PICO {eventospico} veces por un total de {demandaexpico} Kw")

    print(f"Se supera el valor contratado de demanda durante weekdays en horario NO PICO {eventosfpico} veces por un total de {demandaexfpico} Kw")
